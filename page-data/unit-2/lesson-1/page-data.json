{"componentChunkName":"component---src-templates-lesson-template-js","path":"/unit-2/lesson-1","webpackCompilationHash":"92f4941fade72e4a78a1","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"path\": \"/unit-2/lesson-1\",\n  \"start\": \"2019-09-12T00:00:00.000Z\",\n  \"end\": \"2019-09-12T00:00:00.000Z\",\n  \"title\": \"Lesson 2.01 - The ArrayList\",\n  \"slides\": true\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = Layout;\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"ArrayIntList\"), mdx(\"p\", null, \"Using the concepts from the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\"\n  }), \"List\"), \" interface we started implementing our own version of \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.oracle.com/javase/8/docs/api/java/util/ArrayList.html\"\n  }), \"ArrayList\"), \".\"), mdx(\"p\", null, \"We need to resize the values array anytime we run out of capacity, as long as we double the array\\neach time we run out of space we can claim that on average the add operation is O(1) (\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.geeksforgeeks.org/analysis-algorithm-set-5-amortized-analysis-introduction/\"\n  }), \"Amoritized Analysis\"), \")\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"public class ArrayIntList {\\n    private static final int DEFAULT = 8;\\n\\n    private int[] values;\\n    private int size;\\n\\n    public class ArrayIntList() {\\n        this(DEFAULT);\\n    }\\n\\n    public class ArrayIntList(int initialSize) {\\n        this.values = new int[initialSize];\\n    }\\n\\n    public boolean add(int value) {\\n        if (this.size == this.values.length) {\\n            int[] newValues = new [this.values.length * 2];\\n\\n            for (int i = 0; i < this.values.length; i++) {\\n                newValues[i] = this.values[i];\\n            }\\n\\n            this.values = newValues;\\n        }\\n\\n        this.values[this.size] = value;\\n        this.size++;\\n\\n        return true;\\n    }\\n\\n    public int indexOf(int value) {\\n        for (int i = 0; i < this.size; i++) {\\n            if (this.values[i] == value) {\\n                return i;\\n            }\\n        }\\n\\n        return -1;\\n    }\\n\\n\\n    public String toString() {\\n        String result = \\\"[\\\";\\n\\n        for (int i = 0; i < this.size; i++) {\\n            result += (this.values[i] + \\\" \\\");\\n        }\\n\\n        result += \\\"]\\\";\\n\\n        return result;\\n    }\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"path":"/unit-2/lesson-1","start":"September 12, 2019","title":"Lesson 2.01 - The ArrayList","attachments":null,"slides":true}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}