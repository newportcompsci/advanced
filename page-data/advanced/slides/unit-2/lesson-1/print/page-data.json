{"componentChunkName":"component---node-modules-gatsby-theme-mdx-deck-src-templates-deck-js","path":"/advanced/slides/unit-2/lesson-1/print","webpackCompilationHash":"fd3658b8921e729d0c86","result":{"data":{"deck":{"id":"7e5e5002-dabc-58bd-801b-1d6228ba3ce5","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar theme = slideTheme;\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"The ArrayList\"), mdx(\"hr\", null), mdx(\"h2\", null, \"ArrayList\"), mdx(\"p\", null, \"Last week we used an \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.oracle.com/javase/8/docs/api/java/util/ArrayList.html\"\n  }), \"ArrayList\"), \" to print the contents of a file in reverse\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"public static void main(String[] args) {\\n    File file = new File(\\\"test.txt\\\");\\n    Scanner input = new Scanner(file);\\n\\n    ArrayList<String> contents = new ArrayList<>();\\n\\n    while(input.hasNextLine()) {\\n        contents.add(input.nextLine());\\n    }\\n\\n    for(int i = contents.size() - 1; i >= 0; i--) {\\n        System.out.println(contents.get(i));\\n    }\\n}\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Array Limitations\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Fixed-size\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Adding or removing from middle is hard \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"They don't have much build-in functionality (need \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html\"\n  }), \"Arrays\"), \" class)\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Collections\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"collection\"), \": an object that stores data (i.e., A Data Structure)\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"the objects stored are called \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"elements\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"some collections maintain ordering, some allow duplicates\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"typical operations are: add, remove, clear, contains (search), size\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Lists\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\"\n  }), \"List\"), \": A collection of elements with 0-based \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"indexes\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"elements can be added to the front, back, or eleswhere \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"a list has a \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"size\"), \" or the number of elements that have been added\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Changes size as elements are added\")), mdx(\"hr\", null), mdx(\"h2\", null, \"The List Interface\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"method\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"add(value)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"add(index, value)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"clear()\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"indexOf(value)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"get(index)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"remove(index)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"set(index, value)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"size()\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"toString()\")))), mdx(\"hr\", null), mdx(\"h2\", null, mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"this\"), \" keyword\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"this\"), \": A reference to the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"implicit parameter\"), \" (the object on which a method/constructor is called)\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"this.field; // refers to a field\\nthis.method(params); // refers to an instance method\\nthis(params); // refers to another constructor\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Implement our Constructor\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"private int[] values;\\nprivate int size;\\n\\npublic ArrayIntList(int initialSize) {\\n    this.values = new int[initialSize];\\n    this.size = 0;\\n}\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Implement add (part 1)\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"public boolean add(int value) {\\n    this.values[this.size] = value;\\n    this.size++;\\n\\n    return true;\\n}\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Debugging with toString\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"public String toString() {\\n    String result = \\\"[\\\";\\n\\n    for (int i = 0; i < this.size; i++) {\\n        result += (this.values[i] + \\\" \\\");\\n    }\\n\\n    result += \\\"]\\\";\\n\\n    return result;\\n}\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Implement searching\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"public int indexOf(int value) {\\n    for (int i = 0; i < this.size; i++) {\\n        if (this.values[i] == value) {\\n            return i;\\n        }\\n    }\\n\\n    return -1;\\n}\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"What happens when we run out of room?\"), mdx(\"p\", null, \"If we need to insert an item that goes beyond the bounds of our capacity then\\nwe need to create a new array and copy all of the items over to the new array. \"), mdx(\"p\", null, \"This single operation costs O(N) but if we double the array each time this occurs\\ninfrequent enough that we can claim the average insert is O(1). \"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"This claim comes from some something called \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.geeksforgeeks.org/analysis-algorithm-set-5-amortized-analysis-introduction/\"\n  }), \"Amoritized Analysis\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Improved add\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"public boolean add(int value) {\\n    if (this.size == this.values.length) {\\n        int[] newValues = new [this.values.length * 2];\\n\\n        for (int i = 0; i < this.values.length; i++) {\\n            newValues[i] = this.values[i];\\n        }\\n\\n        this.values = newValues;\\n    }\\n\\n    this.values[this.size] = value;\\n    this.size++;\\n\\n    return true;\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"7e5e5002-dabc-58bd-801b-1d6228ba3ce5","slug":"/advanced/slides/unit-2/lesson-1","title":"The ArrayList"}}}