{"componentChunkName":"component---node-modules-gatsby-theme-mdx-deck-src-templates-deck-js","path":"/slides/unit-1/lesson-2","matchPath":"/slides/unit-1/lesson-2/*","webpackCompilationHash":"35108278f7fd2d37fe8e","result":{"data":{"deck":{"id":"a498fc51-73e1-508a-855e-8dec5dc355c1","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar theme = slideTheme;\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Reading Files and ArrayList\"), mdx(\"hr\", null), mdx(\"h2\", null, \"Reading Files\"), mdx(\"p\", null, \"To read a file we need two classes: File and Scanner. \"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.oracle.com/javase/7/docs/api/java/io/File.html\"\n  }), \"File Class\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.oracle.com/javase/7/docs/api/java/util/Scanner.html\"\n  }), \"Scanner Class\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Advanced Files\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.oracle.com/javase/7/docs/api/java/io/FileReader.html\"\n  }), \"FileReader\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.oracle.com/javase/8/docs/api/java/io/BufferedReader.html\"\n  }), \"BufferedReader\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.oracle.com/javase/7/docs/api/java/io/FileWriter.html\"\n  }), \"FileWriter\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.oracle.com/javase/7/docs/api/java/io/BufferedWriter.html\"\n  }), \"BufferedWriter\")), mdx(\"hr\", null), mdx(\"h2\", null, \"File\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"File\"), \" lives in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"java.io\"), \" package so we must have an import to use it.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"public File(String pathName)\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Creates an instance of a file located at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pathName\"))), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"File\"), \" also has some fun methods associated with it: \"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"th\"\n  }, \"method\")), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"th\"\n  }, \"description\")))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean isDirectory()\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"returns true if it has files in it\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean isFile()\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"returns true if it is a file\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean mkdir()\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"creates a directory\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean createNewFile()\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"creates a file\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean rename()\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"renames the file\")))), mdx(\"hr\", null), mdx(\"h2\", null, \"IOExceptions\"), mdx(\"p\", null, \"Anytime a file manipulates or changes values on disk, there is a chance\\nthat things could go wrong. To tell Java that this might occur, we must\\ntell Java that the method \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"throws IOException\"), \" \"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"You can also use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"try/catch\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Scanner\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Scanner\"), \" is typically used for user input, but we can also read files with it.\\nWe can find \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Scanner\"), \" in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"java.util\"), \" package. \"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"public Scanner(File source)\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"public Scanner(InputStream source)\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"If we pass our file object to scanner we can treat a file the same way as user input!\")), mdx(\"p\", null, \"A quick refresher on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Scanner\"), \" API\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"method\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean hasNext()\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"true if there is more to read\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"String next()\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"gets next word\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"String nextLine()\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"gets next line, up to '\\\\n'\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"int nextInt()\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"gets next integer\")))), mdx(\"hr\", null), mdx(\"h2\", null, \"Where do I put the file?\"), mdx(\"p\", null, \"Files are referenced from the root of your project\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"next to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src\"), \" folder\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Your Task\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Look up the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"List\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ArrayList\"), \" API\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".txt\"), \" with a list of words \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Write a program that reads in those words and prints them out in reverse. \")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"matchPath":"/slides/unit-1/lesson-2/*","isCreatedByStatefulCreatePages":false,"id":"a498fc51-73e1-508a-855e-8dec5dc355c1","slug":"/advanced/slides/unit-1/lesson-2","title":"Reading Files and ArrayList"}}}