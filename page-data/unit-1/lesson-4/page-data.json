{"componentChunkName":"component---src-templates-lesson-template-js","path":"/unit-1/lesson-4","webpackCompilationHash":"8a5c0ea8d1dfaba8aba5","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"path\": \"/unit-1/lesson-4\",\n  \"start\": \"2019-09-10T00:00:00.000Z\",\n  \"end\": \"2019-09-10T00:00:00.000Z\",\n  \"title\": \"Lesson 1.04 - Space Complexity\",\n  \"slides\": true\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = Layout;\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Continuing from yesterday...\"), mdx(\"h2\", null, \"Example 4\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"public static int mystery(int[] arr, int x) {\\n    int l = 0, r = arr.length - 1;\\n    while(l <= r) {\\n        int m = l + (r - l) / 2;\\n\\n        if (arr[m] == x) \\n            return m;\\n        \\n        if (arr[m] < x)\\n            l = m + 1;\\n        else \\n            r = m - 1;\\n    }\\n\\n    return -1;\\n}\\n\\npublic static void main(String[] args) {\\n    int[] values = {2, 4, 7, 10, 13, 18};\\n    mystery(values, 4);\\n}\\n\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This is Binary Search which we know keeps cutting the search space in half\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Without counting everything, this is O(log(N)) where log is base 2.\")), mdx(\"h2\", null, \"Merge Sort and Beyond\"), mdx(\"p\", null, \"Merge sort splits an array in half each time and looks at each element in\\neach half every time. \"), mdx(\"p\", null, \"Again without looking at the algorithm we know this would be O(N*log(N))\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Think back to the first activity how would you explain the complexity of that problem? \")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Resource: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.geeksforgeeks.org/merge-sort/\"\n  }), \"Merge Sort\"))), mdx(\"h2\", null, \"The Clique Problem (kind-of)\"), mdx(\"p\", null, \"This is known as a \\\"hard\\\" problem (or \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://en.wikipedia.org/wiki/NP-completeness\"\n  }), \"NP-Complete\"), \") and the only way to solve it would be to\\nuse a \\\"Brute Force\\\" approach. \"), mdx(\"p\", null, \"In Big-O notation this would be O(2^n)\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"As far as our class goes we won't really deal with these problems but its good to know they exist.\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Sources: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://en.wikipedia.org/wiki/Clique_problem\"\n  }), \"Clique Problem\"), \", \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://en.wikipedia.org/wiki/Maximal_independent_set\"\n  }), \"Maximal Independent Set\"))), mdx(\"h2\", null, \"Extra Practice\"), mdx(\"p\", null, \"Work on \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://practiceit.cs.washington.edu\"\n  }), \"Practice It\"), \" problems:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"BJP4 Self-Check 13.9\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"BJP4 Self-Check 13.10\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"BJP4 Self-Check 13.11\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"BJP4 Self-Check 13.12\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"BJP4 Self-Check 13.13\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"path":"/unit-1/lesson-4","start":"September 10, 2019","title":"Lesson 1.04 - Space Complexity","attachments":null,"slides":true}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}