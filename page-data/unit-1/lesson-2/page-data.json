{"componentChunkName":"component---src-templates-lesson-template-js","path":"/unit-1/lesson-2","webpackCompilationHash":"fd3658b8921e729d0c86","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"path\": \"/unit-1/lesson-2\",\n  \"start\": \"2019-09-06T00:00:00.000Z\",\n  \"end\": \"2019-09-06T00:00:00.000Z\",\n  \"title\": \"Lesson 1.02 - Reading Files and ArrayList\",\n  \"slides\": true\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = Layout;\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Reading Files\"), mdx(\"p\", null, \"To read a file in Java you need to use the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.oracle.com/javase/7/docs/api/java/io/File.html\"\n  }), \"File\"), \" object in conjunction with the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.oracle.com/javase/7/docs/api/java/util/Scanner.html\"\n  }), \"Scanner\"), \" object.\\nScanner has a constructor that allows you to pass a file object and use it as if you were\\ntaking input from a user. When doing any sort of file processing you need to tell java that something\\nmight go wrong, so in this case we say \\\"main could throw an IOException\\\".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"import java.util.Scanner;\\nimport java.io.File;\\nimport java.io.IOException;\\n\\npublic class FileReader {\\n    public static void main(String[] args) throws IOException {\\n        File file = new File(\\\"test.txt\\\");\\n        Scanner input = new Scanner(file);\\n\\n        while(input.hasNextLine()){\\n            System.out.println(input.nextLine());\\n        }\\n    }\\n}\\n\")), mdx(\"h2\", null, \"ArrayList\"), mdx(\"p\", null, \"The \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html\"\n  }), \"ArrayList\"), \" is a data structure in the java's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"util\"), \" package. Its used when you want to keep track of a\\nset of data in a linear way. \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"import java.util.*;\\n\\npublic class ArrayListClient {\\n    public static void main(String[] args) {\\n        ArrayList<String> names = new ArrayList<>();\\n\\n        names.add(\\\"Alice\\\");\\n        names.add(\\\"Bob\\\");\\n\\n        System.out.println(names.get(1));\\n    }\\n}\\n\")), mdx(\"h2\", null, \"Printing the contents of a file backwards\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"import java.io.*;\\nimport java.util.*;\\n\\npublic class Reverse {\\n    public static void main(String[] args) {\\n        File file = new File(\\\"test.txt\\\");\\n        Scanner input = new Scanner(file);\\n\\n        ArrayList<String> contents = new ArrayList<>();\\n\\n        while(input.hasNextLine()) {\\n            contents.add(input.nextLine());\\n        }\\n\\n        for(int i = contents.size() - 1; i >= 0; i--) {\\n            System.out.println(contents.get(i));\\n        }\\n    }\\n}\\n\\n\")), mdx(\"h2\", null, \"Additional Ways to deal with files / Write to files\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://docs.oracle.com/javase/7/docs/api/java/io/FileReader.html\"\n  }), \"FileReader\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://docs.oracle.com/javase/7/docs/api/java/io/BufferedReader.html\"\n  }), \"BufferedReader\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://docs.oracle.com/javase/7/docs/api/java/io/FileWriter.html\"\n  }), \"FileWriter\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://docs.oracle.com/javase/7/docs/api/java/io/BufferedWriter.html\"\n  }), \"BufferedWriter\"))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"path":"/unit-1/lesson-2","start":"September 06, 2019","title":"Lesson 1.02 - Reading Files and ArrayList","attachments":null,"slides":true}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}